name: Push to remote

on:
  push:
    branches:
      - "**"

jobs:
  install-and-push:
    runs-on: ubuntu-latest
    outputs:
      pushId: ${{ steps.push.outputs.pushId }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
      - name: Install dependencies
        run: npm ci
        env:
          CI: true
      - name: Push to remote
        id: push
        run: |-
          echo "pushId=`npm run -s push -- docs/s-petstore.yaml \
          --organization default \
          --project 'cicd-pushes' \
          --mountPath 'docs/remotes/cicd' \
          --branch "${{ github.ref_name }}" \
          # --namespace "${{ github.event.repository.owner.login }}" \
          # --repository "${{ github.event.repository.name }}" \
          --author "${{ github.event.head_commit.author.name }} <${{ github.event.head_commit.author.email }}>" \
          --message "${{ github.event.head_commit.message }}" \
          # --commitUrl "${{ github.event.head_commit.url }}" \
          --domain 'https://app.lab1.blueharvest.cloud'`" >> "$GITHUB_OUTPUT"
        env:
          REDOCLY_AUTHORIZATION: ${{ secrets.REDOCLY_AUTHORIZATION }}
  wait-for-deploy:
    runs-on: ubuntu-latest
    needs: install-and-push
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
      - name: Install dependencies
        run: |-
          apt-get update && apt-get install -y jq;
          npm ci;
        env:
          CI: true
      - name: Wait for deployment
        run: |-
          get_push () {
            npm run -s push-status -- \
              --organization default \
              --project 'cicd-pushes' \
              --pushId "${{needs.install-and-push.outputs.pushId}}" \
              --format json \
              --domain 'https://app.lab1.blueharvest.cloud'
          }

          poll_status () {
            local PUSH=$1
            local JQ_EXPR=$2
            local DEPLOY_STATUS=`echo $PUSH | jq -r $JQ_EXPR`
            local BUILD_TYPE=$3

            while [[ $DEPLOY_STATUS != "SUCCEEDED" && $DEPLOY_STATUS != "FAILED" ]]; do
              printf "üïí Waiting for $BUILD_TYPE deployment to finish. Current status: $DEPLOY_STATUS\n"
              sleep 5

              DEPLOY_STATUS=`get_push | jq -r $JQ_EXPR`
            done

            if [[ $DEPLOY_STATUS == "FAILED" ]]; then
              echo "‚ùå ${BUILD_TYPE^} deployment failed"
              exit 1
            fi

            echo "üöÄ ${BUILD_TYPE^} deployment succeeded"
          }

          PUSH=`get_push`;
          HAS_CHANGES=`echo $PUSH | jq '.hasChanges'`;
          OUTDATED=`echo $PUSH | jq '.isOutdated'`;

          if [[ $HAS_CHANGES == "false" || $OUTDATED == "true" ]]; then
            echo "üöÄ Deployment is up to date"
            exit 0
          fi

          poll_status "$PUSH" '.status.preview.deploy.status' 'preview'
          poll_status "$PUSH" '.status.production.deploy.status' 'production'


        env:
          REDOCLY_AUTHORIZATION: ${{ secrets.REDOCLY_AUTHORIZATION }}
